<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="demoAop" class="com.jazzyshi.aop.DemoAop"/>

	<!--
		Spring提供了两种AOP实现方式
		1.Schema-based
		  每个通知类都要实现接口或类
		  配置spring配置文件时在<aop:config>配置
		2.AspectJ
		  每个通知不需要实现接口或类
		  配置spring配置文件是在<aop:config>的子标签<aop:aspect>中配置

		详细两种方法实现如下
	-->
	<!-- Schema-based -->
	<bean id="myBeforeAdvice" class="com.jazzyshi.aop.advice.schemabase.MyBeforeAdvice"/>
	<bean id="myAfterAdvice" class="com.jazzyshi.aop.advice.schemabase.MyAfterAdvice"/>
	<bean id="myThrowAdvice" class="com.jazzyshi.aop.advice.schemabase.MyThrowAdvice"/>
	<bean id="myArroundAdvice" class="com.jazzyshi.aop.advice.schemabase.MyArroundAdvice"/>
	<!--配置切面-->
	<aop:config>
		<!--配置切点-->
		<!--1.execution(返回类型 包名.类名.方法名(参数表)))
		    2.语法： target(包名.接口名)
		    3.语法： this(包名.接口名) 实现了某接口的代理对象，会作为切点。 和 target 很类似。
		    4.语法： within(包名.*) - 代表在包中的任意接口或类型都作为切点。
		    5.args(类型,类型) - 代表方法的参数表符合要求的时候，作为切点。
		      execution( * xxxx.*.login(..) ) args(string,string)。
		-->
		<aop:pointcut id="mypoint" expression="execution(* com.jazzyshi.aop.DemoAop.study())"/>
		<!--配置通知-->
		<aop:advisor advice-ref="myAfterAdvice" pointcut-ref="mypoint"/>
		<aop:advisor advice-ref="myBeforeAdvice" pointcut-ref="mypoint"/>
	</aop:config>
	<aop:config>
		<aop:pointcut id="myThrowPoint" expression="execution(* com.jazzyshi.aop.DemoAop.studyThrow())"/>
		<aop:advisor advice-ref="myThrowAdvice" pointcut-ref="myThrowPoint" />
	</aop:config>
	<aop:config>
		<aop:pointcut id="myArroundPoint" expression="execution(* com.jazzyshi.aop.DemoAop.studyArround())"/>
		<aop:advisor advice-ref="myArroundAdvice" pointcut-ref="myArroundPoint" />
	</aop:config>

	<bean id="demoAspectJ" class="com.jazzyshi.aop.DemoAspectJ"/>
	<bean id="myAspectJAdvice" class="com.jazzyshi.aop.advice.aspectj.MyAspectJAdvice"/>
    <aop:config>
    	<aop:aspect ref="myAspectJAdvice">
			<aop:pointcut expression="execution(* com.jazzyshi.aop.DemoAspectJ.demo1(String,int)) and args(name1,age1)" id="myAspectJPoint1"/>
			<aop:pointcut id="myAspectJPoint2" expression="execution(* com.jazzyshi.aop.DemoAspectJ.demo2(String)) and args(name2)" />
			<aop:pointcut expression="execution(* com.jazzyshi.aop.DemoAspectJ.demoAfter())" id="myAspectJPoint3"/>
			<aop:before method="myBefore1" pointcut-ref="myAspectJPoint1" arg-names="name1,age1"/>
			<aop:before method="myBefore2" pointcut-ref="myAspectJPoint2" arg-names="name2"/>
			<aop:around method="myArround" pointcut-ref="myAspectJPoint3"/>
			<!-- aop:after,aop:after-returning,aop:after-throwing执行顺序和配置顺序有关 -->
			<aop:after method="myAfter" pointcut-ref="myAspectJPoint3"/>
			<!--
    		<aop:after-returning method="myaftering" pointcut-ref="mypoint"/>
    		<aop:after-throwing method="mythrow" pointcut-ref="mypoint"/>
    		-->
    	</aop:aspect>
    </aop:config>
</beans>